[Weekly Green Score]
action.email.inline = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
search = | savedsearch "Recent Trip Summary" | stats avg(GreenScore) as GreenScore | eval GreenScore=round(GreenScore,0)

[Trip Green Score]
action.email.inline = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
search = `green_score($TripID$)`

[Weekly Fuel Consumption]
action.email.inline = 1
action.email.reportServerEnabled = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -7d@d
auto_summarize.timespan = 1m
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
displayview = flashtimeline
request.ui_dispatch_view = flashtimeline
search = index=torque Fuel_Level__From_Engine_ECU=* Fuel_Level__From_Engine_ECU!=0 | timechart span=1m avg(Fuel_Level__From_Engine_ECU) as Fuel_%

[Weekly Engine Activity]
action.email.inline = 1
action.email.reportServerEnabled = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -7d@d
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
displayview = flashtimeline
request.ui_dispatch_view = flashtimeline
search = index=torque (Speed__OBD=* OR Engine_RPM=*) | stats avg(Speed__OBD) as Speed, avg(Engine_RPM) as RPM by _time | eval Sum=Speed+RPM | eval Status=if(Sum > RPM, "Moving", "Idle") | stats count by Status

[Weekly Time Spent Driving by Day]
action.email.inline = 1
action.email.reportServerEnabled = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -7d@d
auto_summarize.timespan = 1m
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
displayview = flashtimeline
request.ui_dispatch_view = flashtimeline
search = Trip_Distance=* | eval day = date_mday + "/" + date_month | stats min(_time) as Start_Time, max(_time) as End_Time by trip_uuid, day | eval Total_Time=End_Time-Start_Time | stats sum(Total_Time) as Time by day | eval Time=round(Time/60/60,2) | sort num(day)
vsid = hknfin7o

[Weekly Distance Driven by Day]
action.email.inline = 1
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -7d@d
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
displayview = flashtimeline
search = Trip_Distance=* | eval day = date_mday + "/" + date_month | stats max(`miles(Trip_Distance)`) as Trip_Distance by trip_uuid, day | stats sum(Trip_Distance) as Trip_Distance by day | sort num(day)
vsid = *:7ohfimq9

[Weekly Max Speed]
action.email.inline = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -7d@d
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
displayview = flashtimeline
search = index=torque Speed__OBD=* | stats max(`miles(Speed__OBD)`) as Max_Speed | eval Max_Speed=round(Max_Speed,1)

[Weekly Average Speed]
action.email.inline = 1
action.email.reportServerEnabled = 0
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -7d@d
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
displayview = flashtimeline
request.ui_dispatch_view = flashtimeline
search = index=torque Speed__OBD=* | stats avg(`miles(Speed__OBD)`) as Average_Speed | eval Average_Speed=round(Average_Speed,1)
vsid = *:q8ina43i

[Weekly Time Spent Driving]
action.email.inline = 1
action.email.reportServerEnabled = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
displayview = flashtimeline
request.ui_dispatch_view = flashtimeline
search = | savedsearch "Weekly Time Spent Driving by Day" | stats sum(Time) as Time | eval Time=round(Time,1)
vsid = *:c3x6hwzt

[Week's Speed Range Distribution]
action.email.inline = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -7d@d
auto_summarize.timespan = 1m
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
displayview = flashtimeline
request.ui_dispatch_view = flashtimeline
search = index=torque Speed__OBD=* | stats avg(`miles(Speed__OBD)`) as Speed__OBD by _time | rangemap field=Speed__OBD "0-20 MPH"=0-20 "20-40 MPH"=20-40 "40-60 MPH"=40-60 "60+ MPH"=60-1000 | top range | xyseries range range percent
vsid = hjukgu39

[Recent Trip Summary]
action.email.inline = 1
action.email.reportServerEnabled = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
displayview = flashtimeline
request.ui_dispatch_view = flashtimeline
search = index=torque | rename trip_uuid as Trip_ID | stats min(_time) as Start_Time, max(_time) as End_Time, latest(End_Time) as Total_Time_(Minutes), max(`miles(Trip_Distance)`) as Total_Distance_(Miles), avg(`miles(Speed__OBD)`) as Avg_Speed_(MPH), max(`miles(Speed__OBD)`) as Max_Speed_(MPH), avg(Engine_RPM) as Avg_Engine_RPM, max(Engine_RPM) as Max_Engine_RPM by Trip_ID | eval Total_Time_(Minutes) = round((End_Time - Start_Time)/60,2) | sort -End_Time | eval Start_Time = strftime(Start_Time, "%m/%d/%Y %l:%M:%S %p") | eval End_Time = strftime(End_Time, "%m/%d/%Y %l:%M:%S %p") | eval Avg_Engine_RPM = round(Avg_Engine_RPM,0) | eval Max_Engine_RPM = round(Max_Engine_RPM,0) | eval "Avg_Speed_(MPH)" = round('Avg_Speed_(MPH)',1) | eval "Max_Speed_(MPH)" = round('Max_Speed_(MPH)',1) | eval "Total_Distance_(Miles)" = round('Total_Distance_(Miles)',1) | join type=left Trip_ID [search index=torque_summary | eval GreenScore=round(GreenScore,0) | eval Trip_ID=trip_uuid | fields Trip_ID GreenScore ] | eval GreenScore=coalesce(GreenScore,"Pending Calculation...")
vsid = *:rvmptuj8

